start:
	cargo run

dp-setup:
	DATABASE_URL=$DATABASE_URL_LOCAL diesel setup

db-gen name:
	diesel migration generate {{name}}

db-up:
	DATABASE_URL=$DATABASE_URL_LOCAL diesel migration run
	DATABASE_URL=$DATABASE_URL_TEST diesel migration run

db-down:
	DATABASE_URL=$DATABASE_URL_LOCAL diesel migration revert
	DATABASE_URL=$DATABASE_URL_TEST diesel migration revert

dp-setup-test:
	DATABASE_URL=$DATABASE_URL_TEST diesel setup

schema:
	DATABASE_URL=$DATABASE_URL_LOCAL diesel print-schema > src/models/schema.rs

test:
	APP_ENV=test cargo test

# Build image to be used for provisioning the server
build-image:
	packer build packer.json

# Build the server infrastructe in Scaleway
# provision:
# 	terraform apply

# Build the Rust application binary
# build:
# 	docker run \
# 		--rm \
# 		-it \
# 		-v $PWD:/volume/ \
# 		-v cargo-cache:/root/.cargo \
# 		clux/muslrust:stable \
# 		cargo build --release

# copy-bin:
# 	mkdir -p ./dist/bin/
# 	cp target/x86_64-unknown-linux-musl/release/api ./dist/bin

# This makes the binary smaller
# But it removes valuable stack tracing information
# strip:
# 	docker run --rm -it \
# 		-v $PWD:/volume/ \
# 		clux/muslrust:stable \
# 		strip ./dist/bin/api

# compress:
# 	cd ./dist/bin/ && tar -zcvf api.tar.gz api

# prepare-release: build copy-bin compress

# push:
# 	hyper push 

build-image:
	docker build . -t $API_IMAGE_TAG

push-docker:
	docker push $API_IMAGE_TAG

deploy:
	cap production deploy

ssh:
	ssh root@$API_IP

