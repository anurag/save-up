# Welcome to Serverless!
#
# This file is the main config file for your service.
# It"s very minimal at this point and uses default values.
# You can always add more config options for more control.
# We"ve included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

app: kic
tenant: sporto

service: 
  name: api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: ">=1.28.0 <2.0.0"

provider:
  name: aws
  apiName: kic-api
  stackName: kic-api
  region: ap-southeast-2
  stage: staging
  deploymentBucket:
    name: kic-api
  environment:
    API_SECRET: ${ssm:/kic/prod/api-secret}
    DATABASE_URL:
      "Fn::Join": [":", ["Fn::GetAtt": [PgDB, Endpoint.Address], "Fn::GetAtt": [PgDB, Endpoint.Port]]]
    SYSTEM_EMAIL: ${ssm:/kic/prod/system-email}
    SYSTEM_JWT: ${ssm:/kic/prod/system-jwt}

# you can overwrite defaults here

# you can add statements to the Lambda function"s IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

custom:
  apiSecret: ${ssm:/kic/prod/api-secret}
  dbUserName: ${ssm:/kic/prod/db-user}
  dbPassword: ${ssm:/kic/prod/db-pass}
  systemEmail: ${ssm:/kic/prod/system-email}
  systemJWT: ${ssm:/kic/prod/system-jwt}
  webpack:
    webpackConfig: "webpack.config.js"
    includeModules: false
    packager: "npm"

plugins:
  - serverless-sam
  - serverless-webpack

package:
  individually: true
  exclude:
    - ./**

functions:
  hello:
    runtime: go1.x
    handler: bin/hello/hello
    package:
      exclude:
        - ./**
      include:
        - ./bin/hello/**
    events:
      - http:
          path: hello
          method: get
  migrate:
    runtime: go1.x
    handler: bin/migrate/migrate
    timeout: 10
    package:
      include:
        - ./bin/migrate/**
    events:
      - http:
          path: migrate
          method: post



#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM "some_topic""
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: "/aws/lambda/hello"
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    PgSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Acess to DB
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "5432"
          ToPort: "5432"
          CidrIp: 0.0.0.0/0

    PgDB:
      Type: "AWS::RDS::DBInstance"
      Properties:
        DBName: "kic"
        AllocatedStorage: 5
        DBInstanceIdentifier: "kic"
        DBInstanceClass: "db.t2.micro"
        Engine: "postgres"
        EngineVersion: "10.4"
        MasterUsername: ${self:custom.dbUserName}
        MasterUserPassword: ${self:custom.dbPassword}
        VPCSecurityGroups:
        - Fn::GetAtt:
          - PgSecurityGroup
          - GroupId
      DeletionPolicy: "Snapshot"
  Outputs:
      pgEndpoint:
        Description: "Connection string for database"
        Value:
          Fn::GetAtt:
            - PgDB
            - Endpoint.Address
