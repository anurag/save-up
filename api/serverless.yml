# Welcome to Serverless!
#
# This file is the main config file for your service.
# It"s very minimal at this point and uses default values.
# You can always add more config options for more control.
# We"ve included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

app: kic
tenant: sporto

service: 
  name: api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: ">=1.28.0 <2.0.0"

provider:
  name: aws
  apiName: kic-api
  stackName: kic-api
  region: ap-southeast-2
  stage: staging
  deploymentBucket:
    name: kic-api
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
        - SNS:Publish
        - SES:SendEmail
      Resource: "*"
  environment:
    API_SECRET: ${ssm:/kic/prod/api-secret}
    DATABASE_NAME: kic
    DATABASE_HOST:
      "Fn::Join": [":", ["Fn::GetAtt": [PgDB, Endpoint.Address], "Fn::GetAtt": [PgDB, Endpoint.Port]]]
    DATABASE_USER: ${ssm:/kic/prod/db-user}
    DATABASE_PASS: ${ssm:/kic/prod/db-pass}
    SYSTEM_EMAIL: ${ssm:/kic/prod/system-email}
    SYSTEM_JWT: ${ssm:/kic/prod/system-jwt}

custom:
  apiSecret: ${ssm:/kic/prod/api-secret}
  dbUserName: ${ssm:/kic/prod/db-user}
  dbPassword: ${ssm:/kic/prod/db-pass}
  systemEmail: ${ssm:/kic/prod/system-email}
  systemJWT: ${ssm:/kic/prod/system-jwt}
  webpack:
    webpackConfig: "webpack.config.js"
    includeModules: false
    packager: "npm"

plugins:
  - serverless-sam

package:
  individually: true
  exclude:
    - ./**

functions:
  hello:
    runtime: go1.x
    handler: bin/hello/hello
    package:
      exclude:
        - ./**
      include:
        - ./bin/hello/**
    events:
      - http:
          path: hello
          method: get
  migrate:
    runtime: go1.x
    handler: bin/migrate/migrate
    timeout: 10
    package:
      include:
        - ./bin/migrate/**
    events:
      - http:
          path: migrate
          method: post
  graphql_app:
    runtime: go1.x
    handler: bin/graphql_app/graphql_app
    timeout: 10
    package:
      include:
        - ./bin/graphql_app/**
    events:
      - http:
          path: graphql-app
          method: post
  graphql_pub:
    runtime: go1.x
    handler: bin/graphql_pub/graphql_pub
    timeout: 10
    package:
      include:
        - ./bin/graphql_pub/**
    events:
      - http:
          path: graphql-pub
          method: post
  mail:
    runtime: go1.x
    handler: bin/mail/mail
    timeout: 30
    package:
      include:
        - ./bin/mail/**
    events:
        - http:
            path: mail
            method: post

resources:
  Resources:
    PgSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Acess to DB
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "5432"
          ToPort: "5432"
          CidrIp: 0.0.0.0/0

    PgDB:
      Type: "AWS::RDS::DBInstance"
      Properties:
        DBName: "kic"
        AllocatedStorage: 5
        DBInstanceIdentifier: "kic"
        DBInstanceClass: "db.t2.micro"
        Engine: "postgres"
        EngineVersion: "10.4"
        MasterUsername: ${self:custom.dbUserName}
        MasterUserPassword: ${self:custom.dbPassword}
        VPCSecurityGroups:
        - Fn::GetAtt:
          - PgSecurityGroup
          - GroupId
      DeletionPolicy: "Snapshot"
  Outputs:
      pgEndpoint:
        Description: "Connection string for database"
        Value:
          Fn::GetAtt:
            - PgDB
            - Endpoint.Address
