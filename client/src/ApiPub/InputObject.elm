-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ApiPub.InputObject exposing (SignIn, SignInRequiredFields, SignUp, SignUpRequiredFields, buildSignIn, buildSignUp, encodeSignIn, encodeSignUp)

import ApiPub.Interface
import ApiPub.Object
import ApiPub.Scalar
import ApiPub.Union
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildSignIn : SignInRequiredFields -> SignIn
buildSignIn required =
    { email = required.email, password = required.password }


type alias SignInRequiredFields =
    { email : String, password : String }


{-| Type for the SignIn input object.
-}
type alias SignIn =
    { email : String, password : String }


{-| Encode a SignIn into a value that can be used as an argument.
-}
encodeSignIn : SignIn -> Value
encodeSignIn input =
    Encode.maybeObject
        [ ( "email", Encode.string input.email |> Just ), ( "password", Encode.string input.password |> Just ) ]


buildSignUp : SignUpRequiredFields -> SignUp
buildSignUp required =
    { name = required.name, email = required.email, password = required.password }


type alias SignUpRequiredFields =
    { name : String, email : String, password : String }


{-| Type for the SignUp input object.
-}
type alias SignUp =
    { name : String, email : String, password : String }


{-| Encode a SignUp into a value that can be used as an argument.
-}
encodeSignUp : SignUp -> Value
encodeSignUp input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "email", Encode.string input.email |> Just ), ( "password", Encode.string input.password |> Just ) ]
