-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Account exposing (TransactionsRequiredArguments, id, name, selection, transactions, yearlyInterest)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Api.Object.Account
selection constructor =
    Object.selection constructor


id : Field Int Api.Object.Account
id =
    Object.fieldDecoder "id" [] Decode.int


name : Field String Api.Object.Account
name =
    Object.fieldDecoder "name" [] Decode.string


yearlyInterest : Field Float Api.Object.Account
yearlyInterest =
    Object.fieldDecoder "yearlyInterest" [] Decode.float


type alias TransactionsRequiredArguments =
    { since : Float }


transactions : TransactionsRequiredArguments -> SelectionSet decodesTo Api.Object.Transaction -> Field (List decodesTo) Api.Object.Account
transactions requiredArgs object_ =
    Object.selectionField "transactions" [ Argument.required "since" requiredArgs.since Encode.float ] object_ (identity >> Decode.list)
