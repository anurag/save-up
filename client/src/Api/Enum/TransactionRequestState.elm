-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.TransactionRequestState exposing (TransactionRequestState(..), decoder, list, toString)

import Json.Decode as Decode exposing (Decoder)


type TransactionRequestState
    = Pending
    | Approved
    | Rejected


list : List TransactionRequestState
list =
    [ Pending, Approved, Rejected ]


decoder : Decoder TransactionRequestState
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "PENDING" ->
                        Decode.succeed Pending

                    "APPROVED" ->
                        Decode.succeed Approved

                    "REJECTED" ->
                        Decode.succeed Rejected

                    _ ->
                        Decode.fail ("Invalid TransactionRequestState type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : TransactionRequestState -> String
toString enum =
    case enum of
        Pending ->
            "PENDING"

        Approved ->
            "APPROVED"

        Rejected ->
            "REJECTED"
